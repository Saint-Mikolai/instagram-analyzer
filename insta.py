import streamlit as st
from phi.agent import Agent
from phi.model.google import Gemini
from phi.tools.duckduckgo import DuckDuckGo
from typing import List, Optional
import instaloader
import re
import time
import itertools

# -----------------------------
# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó INSTAGRAM
# -----------------------------
def extract_username(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ Instagram-–ø—Ä–æ—Ñ–∏–ª—å."""
    match = re.search(r'instagram\.com/([^/?#&]+)', url)
    if match:
        return match.group(1)
    else:
        raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Å—ã–ª–∫–∏.")

def parse_instagram_profile(url: str, num_posts: int = 3):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ñ–∏–ª—è Instagram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —Ä–µ—Ç—Ä–∞—è–º–∏
    """
    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            username = extract_username(url)
            L = instaloader.Instaloader()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
            
            profile = instaloader.Profile.from_username(L.context, username)
            
            return {
                "username": username,
                "profile_pic_url": profile.profile_pic_url,
                "bio": profile.biography,
                "captions": [
                    post.caption if post.caption else "–ü–æ–¥–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    for post in itertools.islice(profile.get_posts(), num_posts)
                ]
            }
        except instaloader.exceptions.InstaloaderException as e:
            retry_count += 1
            if retry_count == max_retries:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# -----------------------------
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ì–ï–ù–¢–û–í
# -----------------------------
def initialize_agents(api_key: str) -> tuple[Optional[Agent], Optional[Agent], Optional[Agent]]:
    if not api_key or len(api_key.strip()) < 10:  # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
        st.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API –∫–ª—é—á")
        return None, None, None
        
    try:
        model = Gemini(id="gemini-2.0-flash-exp", api_key=api_key)

        # –ê–≥–µ–Ω—Ç: ¬´–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä¬ª
        art_director_agent = Agent(
            model=model,
            instructions=[
                "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é Instagram-–ø—Ä–æ—Ñ–∏–ª—è.",
                "1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, —Å–≤–µ—Ç, —Ü–≤–µ—Ç–∞ –∏ –æ–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç —Ñ–æ—Ç–æ.",
                "2. –î–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä—è–¥–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ.",
                "3. –ó–∞–º–µ—á–∞–π –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–æ—Å–∞—é—Ç—Å—è –≤ –≥–ª–∞–∑–∞ –∏ –º–æ–≥—É—Ç –ø–æ–≤—ã—Å–∏—Ç—å/—Å–Ω–∏–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ—Ñ–∏–ª—é.",
                "–ë—É–¥—å –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."
            ],
            markdown=True
        )

        # –ê–≥–µ–Ω—Ç: ¬´–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥¬ª
        copy_agent = Agent(
            model=model,
            instructions=[
                "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥—É –∏ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ç–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤ –≤ Instagram.",
                "1. –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è, —Ü–µ–ø–ª—è—é—â–∏–µ —Ñ—Ä–∞–∑—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                "2. –î–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ —É—Å–∏–ª–∏—Ç—å –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å.",
                "3. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–≥–∫–∏–π —é–º–æ—Ä –∏–ª–∏ –∏—Ä–æ–Ω–∏—é –¥–ª—è –ø—Ä–∏–¥–∞–Ω–∏—è –æ—Ç—Ç–µ–Ω–∫–∞ '–ø—Ä–æ–∂–∞—Ä–∫–∏'."
            ],
            markdown=True
        )

        # –ê–≥–µ–Ω—Ç: ¬´–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥/–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å¬ª
        market_agent = Agent(
            model=model,
            tools=[DuckDuckGo(search=True)],
            instructions=[
                "–¢—ã ‚Äî –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–∏–ª—è –≤ Instagram.",
                "1. –ò—Å—Ö–æ–¥—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (bio) –∏ –æ–±—â–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–∞–≤–∞–π –æ—Ü–µ–Ω–∫—É –∏ '–ø—Ä–æ–∂–∞—Ä–∫—É'.",
                "2. –ü–æ–¥–º–µ—á–∞–π, –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–∞ —Ñ–æ–Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.",
                "3. –î–∞, –∏—Ä–æ–Ω–∏—è –∏ —é–º–æ—Ä —É–º–µ—Å—Ç–Ω—ã, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞—Ö –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.",
                "4. –ù–∞–π–¥–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö Instagram-–±–ª–æ–≥–µ—Ä–æ–≤ –∏–∑ —Ç–æ–π –∂–µ –Ω–∏—à–∏:",
                "   - –ò—Å–ø–æ–ª—å–∑—É–π DuckDuckGo –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ",
                "   - –°—Ä–∞–≤–Ω–∏ —Å—Ç–∏–ª—å, –ø–æ–¥–∞—á—É –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                "   - –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã",
                "   - –í—ã–¥–µ–ª–∏ —Ñ–∏—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å",
                "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –Ω–∏—à–µ."
            ],
            markdown=True
        )

        return art_director_agent, copy_agent, market_agent
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {str(e)}")
        return None, None, None

# -----------------------------
# –°–ê–ô–î–ë–ê–† –î–õ–Ø API-–ö–õ–Æ–ß–ê
# -----------------------------
with st.sidebar:
    st.header("üîë API Configuration")

    if "api_key_input" not in st.session_state:
        st.session_state.api_key_input = ""
        
    api_key = st.text_input(
        "Enter your Gemini API Key",
        value=st.session_state.api_key_input,
        type="password",
        help="Get your API key from Google AI Studio",
        key="api_key_widget"
    )

    if api_key != st.session_state.api_key_input:
        st.session_state.api_key_input = api_key
    
    if api_key:
        st.success("API Key provided! ‚úÖ")
    else:
        st.warning("Please enter your API key to proceed")
        st.markdown("""
        To get your API key:
        1. Go to [Google AI Studio](https://makersuite.google.com/app/apikey)
        """)

# -----------------------------
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# -----------------------------
st.title("–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Instagram-–ø—Ä–æ—Ñ–∏–ª—è")

if st.session_state.api_key_input:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    art_director_agent, copy_agent, market_agent = initialize_agents(st.session_state.api_key_input)
    
    if all([art_director_agent, copy_agent, market_agent]):
        
        # -----------------------------
        # –ë–ª–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ IG-–ø—Ä–æ—Ñ–∏–ª—å
        # -----------------------------
        st.header("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram-–ø—Ä–æ—Ñ–∏–ª—å")
        profile_url = st.text_input(
            "–ù–∞–ø—Ä–∏–º–µ—Ä: https://www.instagram.com/instagram/",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É..."
        )

        # -----------------------------
        # –ë–ª–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
        # -----------------------------
        st.header("üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞")

        analysis_types = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
            ["–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π –æ–±–∑–æ—Ä", "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑"],
            default=["–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π –æ–±–∑–æ—Ä"]
        )

        specific_elements = st.multiselect(
            "–ù–∞ —á—ë–º —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
            [
                "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è, —Ü–≤–µ—Ç", 
                "–°—Ç–∏–ª—å –∏ –ø–æ–¥–∞—á–∞ –≤ —Ç–µ–∫—Å—Ç–µ", 
                "–Æ–º–æ—Ä –∏ –∏—Ä–æ–Ω–∏—è", 
                "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
            ]
        )

        context = st.text_area(
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
            placeholder="–û–ø–∏—à–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ —ç—Ç–∞ '–ø—Ä–æ–∂–∞—Ä–∫–∞': —Ü–µ–ª—å, –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ —Ç.–¥."
        )

        # -----------------------------
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        # -----------------------------
        if st.button("üöÄ Run Analysis", type="primary"):
            if profile_url:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–∏–ª—è
                    with st.spinner("–ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ñ–∏–ª—å..."):
                        data = parse_instagram_profile(profile_url, num_posts=3)

                    if data:
                        st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

                        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
                        username = data["username"]
                        profile_pic_url = data["profile_pic_url"]
                        bio = data["bio"]
                        captions = data["captions"]

                        all_images = [profile_pic_url] if profile_pic_url else []

                        # --- –ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π –æ–±–∑–æ—Ä ---
                        if "–ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π –æ–±–∑–æ—Ä" in analysis_types:
                            with st.spinner("üé® –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º..."):
                                prompt_art = f"""
                                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏–∑—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.
                                –£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã: {', '.join(specific_elements)}.
                                –î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}
                                –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ '–ø—Ä–æ–∂–∞—Ä–∫–∏', –Ω–æ —Å –ø–æ–ª—å–∑–æ–π.
                                """
                                response_art = art_director_agent.run(
                                    message=prompt_art,
                                    images=all_images  # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç URL
                                )
                                st.subheader("üé® –ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π –æ–±–∑–æ—Ä")
                                st.markdown(response_art.content)

                        # --- –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥ ---
                        if "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥" in analysis_types:
                            with st.spinner("‚úçÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–µ–π –ø–æ—Å—Ç–æ–≤..."):
                                posts_text = "\n\n".join([f"–ü–æ—Å—Ç #{i+1}:\n{c}" for i, c in enumerate(captions)])
                                prompt_copy = f"""
                                –ù–∏–∂–µ —Ç–µ–∫—Å—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ Instagram-–ø—Ä–æ—Ñ–∏–ª—è:
                                {posts_text}

                                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, —É—á–∏—Ç—ã–≤–∞—è —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã: {', '.join(specific_elements)}.
                                –î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}

                                –î–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥–∞ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è,
                                –º–æ–∂–Ω–æ —Å –¥–æ–ª–µ–π —é–º–æ—Ä–∞.
                                """
                                response_copy = copy_agent.run(message=prompt_copy)
                                st.subheader("‚úçÔ∏è –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥")
                                st.markdown(response_copy.content)

                        # --- –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---
                        if "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑" in analysis_types:
                            with st.spinner("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è '–ø—Ä–æ–∂–∞—Ä–∫–∞'..."):
                                prompt_market = f"""
                                –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (bio):
                                '{bio}'

                                –£—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã: {', '.join(specific_elements)}.
                                –î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç: {context}

                                –î–∞–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏,
                                –º–æ–∂–Ω–æ —Å –Ω–æ—Ç–∫–æ–π –∏—Ä–æ–Ω–∏–∏, –Ω–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
                                """
                                response_market = market_agent.run(message=prompt_market)
                                st.subheader("üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                                st.markdown(response_market.content)

                        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–≤–µ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫
                        if len(analysis_types) > 1:
                            st.subheader("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã")
                            st.info("""
                            –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã:
                            - –ê—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä—Å–∫–∏–π –æ–±–∑–æ—Ä: –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
                            - –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥/–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥: —Ç–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
                            - –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                            """)

                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —ç—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª–µ.")
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
else:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# -----------------------------
# –§–£–¢–ï–†
# -----------------------------
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <h4>Tips for Best Results</h4>
    <p>
    ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω—É–∂–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é (–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π)<br>
    ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç<br>
    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ (–¥–ª—è –∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å, –µ–≥–æ —Ü–µ–ª—å –∏ —Ç.–¥.)<br>
    ‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å —é–º–æ—Ä–∞ ‚Äî –º—ã –¥–µ–ª–∞–µ–º ¬´–ø—Ä–æ–∂–∞—Ä–∫—É¬ª –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ
    </p>
</div>
""", unsafe_allow_html=True)
